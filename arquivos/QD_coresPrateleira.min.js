/* Cores Na Prateleira // 12 // Carlos Vinicius [QUATRO DIGITAL] // Todos os direitos reservados */
/*
* Para debugar inclua na url: debugcp
*/
// FUNÇÕES AUXILIARES
if("function"!==typeof(String.prototype.trim))String.prototype.trim=function(){ return this.replace(/^\s+|\s+$/g,""); };
/* Quatro Digital - jQuery Ajax Queue // 4.0 // Carlos Vinicius [ QUATRO DIGITAL ] // MIT <http://pt.wikipedia.org/wiki/Licen%C3%A7a_MIT> */
(function(d){if("function"!==typeof d.qdAjax){var a={};d.qdAjaxQueue=a;150>parseInt((d.fn.jquery.replace(/[^0-9]+/g,"")+"000").slice(0,3),10)&&console&&"function"==typeof console.error&&console.error();d.qdAjax=function(f){try{var b=d.extend({},{url:"",type:"GET",data:"",success:function(){},error:function(){},complete:function(){},clearQueueDelay:5},f),e;e="object"===typeof b.data?JSON.stringify(b.data):b.data.toString();var c=encodeURIComponent(b.url+"|"+b.type+"|"+e);a[c]=a[c]||{};"undefined"==
typeof a[c].jqXHR?a[c].jqXHR=d.ajax(b):(a[c].jqXHR.done(b.success),a[c].jqXHR.fail(b.error),a[c].jqXHR.always(b.complete));a[c].jqXHR.always(function(){isNaN(parseInt(b.clearQueueDelay))||setTimeout(function(){a[c].jqXHR=void 0},b.clearQueueDelay)});return a[c].jqXHR}catch(g){"undefined"!==typeof console&&"function"===typeof console.error&&console.error("Problemas no $.qdAjax :( . Detalhes: "+g.message)}};d.qdAjax.version="4.0"}})(jQuery);
/* Quatro Digital - sessionStorage // 1.0 // Carlos Vinicius // Todos os direitos reservados */
(function(){var e=function(b,c){if("object"===typeof console&&"function"===typeof console.error&&"function"===typeof console.info&&"function"===typeof console.warn){var a;"object"===typeof b?(b.unshift("[Quatro Digital - sessionStorage]\n"),a=b):a=["[Quatro Digital - sessionStorage]\n"+b];if("undefined"===typeof c||"alerta"!==c.toLowerCase()&&"aviso"!==c.toLowerCase())if("undefined"!==typeof c&&"info"===c.toLowerCase())try{console.info.apply(console,a)}catch(d){console.info(a.join("\n"))}else try{console.error.apply(console,
a)}catch(e){console.error(a.join("\n"))}else try{console.warn.apply(console,a)}catch(f){console.warn(a.join("\n"))}}};window.qdSessionStorage=window.qdSessionStorage||{};var f="undefined"!==typeof sessionStorage&&"undefined"!==typeof sessionStorage.setItem&&"undefined"!==typeof sessionStorage.getItem;window.qdSessionStorage.setItem=function(b,c,a){try{if(!f)return!1;var d=new Date;sessionStorage.setItem(b,c);isNaN(parseInt(a))||(d.setTime(d.getTime()+6E4*a),sessionStorage.setItem(b+"_expiration",
d.getTime()))}catch(g){e(["Aeeee irm\u00e3o! Algo saiu errado ao tentar salvar os dados no armazenamento da sess\u00e3o. Detalhes: ",g.message],"alerta")}};window.qdSessionStorage.getItem=function(b){try{if(!f)return!1;var c=new Date,a=parseInt(sessionStorage.getItem(b+"_expiration")||0,10)||0;return c.getTime()>a?(sessionStorage.removeItem&&(sessionStorage.removeItem(b),sessionStorage.removeItem(b+"_expiration")),null):sessionStorage.getItem(b)}catch(d){e(["Aeeee irm\u00e3o! Algo saiu errado ao tentar obter os dados no armazenamento da sess\u00e3o. Detalhes: ",
d.message],"alerta")}}})();


// CORE
(function(qdWindow, $) {
"use strict";

if (typeof $.fn.QD_coresPrateleira === "function")
    return;
$.fn.QD_coresPrateleira = function() {};

var getSkusData, SkuDataCache, loadSkuLegacy, adjustSkuData, getFullSkuData, imageSizeURL;

var debugOn = document.location.href.toLowerCase().indexOf("debugcp") > -1;
var extTitle = "Cores Prateleira";
var log = function(c,a){if("object"===typeof console){var b;"object"===typeof c?(c.unshift("["+extTitle+"]\n"),b=c):b=["["+extTitle+"]\n"+c];"undefined"===typeof a||"alerta"!==a.toLowerCase()&&"aviso"!==a.toLowerCase()?"undefined"!==typeof a&&"info"===a.toLowerCase()?console.info.apply(console,b):console.error.apply(console,b):console.warn.apply(console,b)}};
var debug = function(c,a){if("object"===typeof console&&debugOn){var b;"object"===typeof c?(c.unshift("["+extTitle+"]\n"),b=c):b=["["+extTitle+"]\n"+c];"undefined"===typeof a||"alerta"!==a.toLowerCase()&&"aviso"!==a.toLowerCase()?"undefined"!==typeof a&&"info"===a.toLowerCase()?console.info.apply(console,b):console.error.apply(console,b):console.warn.apply(console,b)}};

// verificando o suporte ao JSON.stringify
var supportJSON = false;
try{
    JSON.parse(JSON.stringify({a:"b"}));
    supportJSON = true;
}
catch(e) {log("Este navegador não tem suporte a JSON functions", "info"); };

var defaults = {
    productsLi: "li[layout]", // Seletor jQuery para encontrar as "<li>" a partir do que foi definido em "productShelf"
    messageRequestFail: "Não foi posssível obter as informações deste item.", // mensagem exibida quando existe falha na requisição
    saveText: "Economize: R$ #value", // Texto de "economize"
    currency: "R$ ", // Define o tipo de moeda que será adicionao junto ao valor do produto.
    skuGroupSelector: ".sku-selector[name='espec_0']", //(Apenas p/ uso s/ o XML) Seletor dos inputs que compõe o grupo da especificação desejada. Quando definido como "null" serão considerados todos os SKUs para listagem. O comum é que esse grupo seja o que contém a especificação de COR do produto
    restoreOriginalDetails: false, // Define se quando o usuário "tirar" o mouse de cima do elemento o valor atual será mantido ou se retornará ao valor oginal do produto.
    checkLinkEquals: false, // Checar se o link do produto é o mesmo que vem no "campo produto"
    forceAvailable: false, // Exibir ou não a informação de produto indisponível. Caso seja definido como "true" serão exibidos os dados de preço/parcelamento mesmo p/ um SKU indisponível
    forceImgList: false, // Força a exibição das miniaturas mesmo quando o produto esta esgotado, esta regra é ignorada quando "forceAvailable" esta como "true"
    autoSetup: true, // O script tenta pré configurar a prateleira automaticamente
    checkIsAvaliable: false, // Habilitar a verificação recursiva de todos os Skus cadastrados no campo produto para tentar encontrar algum disponível
    useProductField: false, // Habilita a busca de SKU no campo produto. Caso "false" ele irá buscar a informação na página de cores
    checkDuplicateUri: true, // Verifica se já existe um thumb com a mesma URI deste SKU
    replaceProductName: false, // Se marcado como "true" ele irá substituir o nome do produto pelo nome do SKU ao passar o mouse
    productNameLimiter: null, // Defina um valor numérico para limitar a quantidade de caracteres que serão exibidos no título do produto
    productNameStopInLastWord: false, // Se marcado como "true" e "productNameLimiter" for definido o nome do produto será limitado à última palavra antes do limite de caracteres
    checkDuplicateSKUByDimenion: true, // Verifica se para o valor da definição escolhida não já existe um SKU
    addSkuIdInURL: true, // Adiciona uma querystring com o id do SKU selecionado na URL do produto
    speedFade: 200, // velocidade da transição das imagens
    thumbsQuantity: 4, // Quantidade máxima de thumbs a serem exibidos na vitrine
    minSkuQttShow: 2, // Quantidade miníma de SKUs necessários para exibir as miniaturas
    thumbByLabel: null, // (Des. apenas p/ SmartCheckout) String (sempre em minúsculo) que define o label a ser utilizado para buscar a imagem do thumb
    thumbSize: {
        width: 36,
        height: 36
    }, // tamanho da thumb exibida na vitrine
    imageSize: "auto", // (SmartCheckout) Exemplo: { width : 165, height : 165 } Tamanho da imagem exibida na vitrine. Caso definido como "auto" ele tentará buscar o tamanho pela imagem existente
    groupSkuByDimension: true, // (SmartCheckout) Define como será identificado o SKU único de cada cor (dimensão específicada no parametro "dimensions"), se marcado como TRUE ele irá agrupar pela dimensão (recomendado para lojas que possuem mais de uma específicação)
    dimensions: ["Cor"], // (SmartCheckout) Informa a dimensão na qual o SKU deve ser considerado
    imageLabel: [null], // Informa qual o label de imagem deve ser carregado, sempre em minúsculo. Se um item do array for definido como Nulo a imagem a ser exibida é a padrão do SKU
    primarySkuThumb: null, // Função chamada a cada interação de um produto para definir se existirá um SKU a ser exibido primeiro. Como parametro é passada a <li> do produto
    limitRequestSimilarProducts: true, // Melhora a performance se definida como "true". Define se a quantidade de requisições de produtos similares será limitda ao número máximo de thumbs a serem exibidas
    ajaxCallback: function() {}, // callback chamado ao concluir com sucesso a requisição ajax
    callback: function() {}, // Callback ao término da execução de todas as funções, não lenvando em consideraçao as requisições ajax
    thumbRendered: function($li, $thumb, productHtml, skuProduct, skuId) {}, // Callback após montagem das miniaturas do produto (neste momento a imagem ainda não está no DOM). Recebe como parâmetro dois objetos jQuery um contendo a li da prateleira e o outro o thumb, um objeto com o HTML de todos os produtos que foram obtidos via Ajax, um objeto contendo todos os SKUs como chave e o produto ao qual ele pertence como valor e o ID do SKU
    imageUrl: function(url, newWidth, newHeight) {
        try {
            return url.replace(/(ids\/[0-9]+\-)([0-9]+\-[0-9]+)/i, "$1" + newWidth + "-" + newHeight);
        } catch (e) {
            log(["Erro no callback 'imageUrl'. ", e.message], "alerta");
            return "";
        }
    }, // Função para tratar a url das imagens. Alterando o seu tamanho
    // Essa função deve executar o callback passando um único parametro que é um array de objeto contendo o id do produto e sua URL ([{id: *, url: *}]) e com isso o plugin irá buscar as informações de cada produto para adicionar a vitrine corrente
    // Essa função é chamada a cada item da vitrine
    similarProducts: function($li, prodId, prodUrl, callback) {callback(false);},

        /* DESCONTINUADO */
        isSmartCheckout: true, // Define se o plugin irá funcionar no checkou tradicional ou no Smart Checkout (novo)
        /* DESCONTINUADO */
        action: 2, // Parametro que define qual ação tomar para controlar os eventos do mouse. // Descontinuada
        /* DESCONTINUADO */
        productImgId: 30, // (Somente versão não SmartChekout) Id do tamanho da imagem a ser exibida na prateleira
        /* DESCONTINUADO */
        thumbImgId: 3, // (Somente versão não SmartChekout) Id do thumb a ser exibido abaixo da foto do produto
        /* DESCONTINUADO */
        productPageUrl: "/cores-prateleira" // Define a página onde será obtido os dados do produto
};

// Validação de dominio - p/ debugar use a query string: qu%E0%B8%84%D1%82%D1%8F%CF%83d%C2%A1g%C2%A1%D1%82%E0%B8%84%C5%82=debug
var authorize = (function(qdWindow) {
    // chave do dominio
    var domain2 = {
        //araujo.com.br(araujo)
        "j":"jj%25C2%25A8nenhwb%25C2%25A8pbz%25C2%25A8oe",
        "ne":"nhwb%25C2%25A8pbz%25C2%25A8oe",
        "nen":"hwb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "nenh":"wb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "nenhw":"b%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "qriryb":"c-nenhwb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc":"-nenhwb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-":"nenhwb%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%":"25A8nenhwb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%2":"5A8nenhwb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25":"A8nenhwb%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",

        //drogaria.ricardoeletro.com.br(drogariaricardoeletro)
        "jjj%25C2%25A":"8qebtnevn%25C2%25A8evpneqbryrgeb%25C2%25A8pbz%25C2%25A8oe",
        "qebtnevn%25C2":"%25A8evpneqbryrgeb%25C2%25A8pbz%25C2%25A8oe",
        "qebtnevnevpneq":"bryrgeb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qebtnevnevpneqb":"ryrgeb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qebtnevnevpneqbr":"yrgeb%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qebtnevne":"vpneqbryrgeb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qebtnevnev":"pneqbryrgeb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qebtnevnevp":"neqbryrgeb%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qebtnev":"nevpneqbryrgeb%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qebtnevn":"evpneqbryrgeb%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qebtnevne":"vpneqbryrgeb%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",

        //busca.araujo.com.br(devaraujo)
        "jjj%25C2%25A8ohfpn%25C2":"%25A8nenhwb%25C2%25A8pbz%25C2%25A8oe",
        "ohfpn%25C2%25A8nenhwb%25":"C2%25A8pbz%25C2%25A8oe",
        "qrinenhwb%25C2%25A8igrkpb":"zzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qrinenhwb%25C2%25A8igrkpbz":"zreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qrinenhwb%25C2%25A8igrkpbzz":"reprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qrinenhwb%25C2%25A8i":"grkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qrinenhwb%25C2%25A8ig":"rkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-qrinenhwb%25C2%25A8igr":"kpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qrinenhwb%25C2%25A":"8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qrinenhwb%25C2%25A8":"igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8qrinenhwb%25C2%25A8i":"grkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",

        //araujo.neemu.com(araujoqa2)
        "jjj%25C2%25A8nenhwb%25C2%25A8arrzh":"%25C2%25A8pbz",
        "nenhwb":"%25C2%25A8arrzh%25C2%25A8pbz",
        "nenhwbdn2%25C2%25A8igrkpbzzrepr%25C2":"%25A8pbz%25C2%25A8oe",
        "nenhwbdn2%25C2%25A8igrkpbzzreprorgn%2":"5C2%25A8pbz%25C2%25A8oe",
        "nenhwbdn2%25C2%25A8igrkpbzzreprfgnoyr%":"25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-nenhwbdn2%25C2%25A8igrkpbzzrepr":"%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-nenhwbdn2%25C2%25A8igrkpbzzrepro":"rgn%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-nenhwbdn2%25C2%25A8igrkpbzzreprfg":"noyr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8nenhwbdn2%25C2%25A8igrkpbzzre":"pr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8nenhwbdn2%25C2%25A8igrkpbzzrep":"rorgn%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8nenhwbdn2%25C2%25A8igrkpbzzrepr":"fgnoyr%25C2%25A8pbz%25C2%25A8oe",

        //araujo.com.br(araujomobile)
        "jjj%25":"C2%25A8nenhwb%25C2%25A8pbz%25C2%25A8oe",
        "nenhwb%":"25C2%25A8pbz%25C2%25A8oe",
        "nenhwbzb":"ovyr%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "nenhwbzbo":"vyr%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "nenhwbzbov":"yr%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-nen":"hwbzbovyr%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "qrirybcn-enh":"wbzbovyr%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "qrirybc-nenhw":"bzbovyr%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8n":"enhwbzbovyr%25C2%25A8igrkpbzzrepr%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8ne":"nhwbzbovyr%25C2%25A8igrkpbzzreprorgn%25C2%25A8pbz%25C2%25A8oe",
        "jjj%25C2%25A8nen":"hwbzbovyr%25C2%25A8igrkpbzzreprfgnoyr%25C2%25A8pbz%25C2%25A8oe"
    };

    return (function(c){var e,b,a,d;b=function(a){return a};a=["a","e",18,"m","s","k","d","u","g","h","a","g","s","t","z","y","o","u","o"];c=c["d"+a[16]+"c"+a[17]+"m"+b(a[1])+"n"+a[13]]["l"+a[18]+"c"+a[0]+"ti"+b("o")+"n"];e=function(a){return escape(encodeURIComponent(a.replace(/\./g,"\u00a8").replace(/[a-zA-Z]/g,function(a){return String.fromCharCode(("Z">=a?90:122)>=(a=a.charCodeAt(0)+13)?a:a-26)})))};for(var f in domain2){if(e(c[[a[9],b("o"),a[12],a[b(13)]].join("")])===f+domain2[f]){d="tr"+a[17]+"e";break}d= "f"+a[0]+"ls"+b(a[1])+""}b=!1;-1<c[[a[12],"e",a[0],"rc",a[9]].join("")].indexOf("qu%E0%B8%84%D1%82%D1%8F%CF%83d%C2%A1g%C2%A1%D1%82%E0%B8%84%C5%82")&&(b=!0);return[d,b]})(qdWindow);
})(qdWindow);
if(!eval(authorize[0]))
    return (authorize[1]? log("ทÃѲ √Αℓ¡∂Α∂Ѳ ΡΑ૨Α ૯ઽƬΑ LѲJΑ!"): false);

$.fn.QD_coresPrateleira = function(opts) {
    "use strict";
    try {
        var $e = $("");
        var prodLinkRegex = /https?\:\/\/[^\/\?#]+/i;

        /*DESCONTINUADO*/
        /*var skuGroup = {};*/
        var options = $.extend(true, {}, defaults, opts);

        var fn = {
            loadSkuJqxhr: null,
            productOriginalInfo: null,
            productOriginalLink: null,
            productOriginalSave: null,
            saveCount: 0,
            onHover: false,
            skuList: [],
            skuQueue: [],
            skuProduct: {},
            productHtml: {},
            productShelf: null,

            /* LEGADO */
            productSkus: {},

            init: function() {
                // chamando as funções
                fn.createSkuElementsList();
            },
            createSkuElementsList: function() {
                var productShelf = fn.productShelf;

                if (productShelf.length > 0){
                    productShelf.each(function(ndx) {
                        var $this = jQuery(this);
                        if (!$this.hasClass("vtex-cpIsActivated"))
                            fn.exec($this, ndx);
                    });
                }
            },
            exec: function(productShelf, index) {
                var productsList = productShelf.find(options.productsLi).not(".helperComplement");

                // Reporting Errors
                if (productsList.length < 1) {
                    log("Prateleira não encontrada \n (" + productsList.selector + ")");
                    return false;
                }

                productShelf.addClass("vtex-cpIsActivated");
                productsList.each(function(ndx1) {
                    var $this, skuList, productField, skuArrayAll, skuArray, skuArrayGroup, objsKey, linkEquals, prodId, build, prodUrl, lg, thumbsWrapper, skuArrayLength;

                    $this = $(this);

                    if (true === options.autoSetup)
                        fn.shelfSetup($this);

                    skuList = $this.find(".qd_cpSkuList");
                    productField = $this.find(".vtex-cpProductField");
                    objsKey = index.toString() + "_" + ndx1.toString();

                    build = function(_skuArrayAll, _prodId) {
                        // Agrupando Skus duplicados
                        skuArrayGroup = fn.groupSku(_skuArrayAll, objsKey);
                        if (options.groupSkuByDimension)
                            skuArray = fn.groupSkuByDimension(skuArrayGroup, _prodId);
                        else
                            skuArray = skuArrayGroup;

                        if (skuArrayGroup.length > 0 && skuArray.length === 0)
                            debug("O produto id " + _prodId + " possui " + _skuArrayAll.length + " SKUs ao total mas após o agrupamento por especificação não restou nenhum SKU para este produto. Certifique-se de ter passado o parametro correto para a opçõão \"dimensions\".", "alerta");

                        $this.find(".vtex-cpProductImage img").addClass("vtex-cpOriginalImage");
                        skuArrayLength = skuArray.length;

                        if (options.forceAvailable || options.forceImgList)
                            skuList.addClass("qd_cpShow").removeClass("qd_cpHide");

                        // Verificando se foi passado algum ID de SKU para ser o primiário
                        var primarySku = null;
                        if(typeof options.primarySkuThumb === "function"){
                            primarySku = options.primarySkuThumb($this);
                            // Reorganizando o objeto para transformar o SKU primiário no primeiro SKU
                            if((typeof primarySku === "string" && primarySku !== "") || typeof primarySku === "number"){
                                for(var i = 0; i < skuArray.length; i++){
                                    if(skuArray[i][1] == primarySku){
                                        var tmpPrimarySku = skuArray[i];
                                        skuArray[i] = skuArray[0];
                                        skuArray[0] = tmpPrimarySku;
                                        break;
                                    }
                                }
                            }
                        }

                        if (skuArrayLength >= options.minSkuQttShow) {
                            // Verifico se existem mais SKUs do que o minimo para ser exibido e caso exista mostro o botão de ver mais
                            if(skuArrayLength > options.thumbsQuantity){
                                $this.find(".qd_cpViewMore").addClass("qd_cpShow").removeClass("qd_cpHide");
                                $this.find(".qd-cp-sku-qtt").text(skuArrayLength);
                            }

                            var skuId, link, linkUri, dtCount, span, thumbLink;
                            for (var i = 0; i < skuArrayLength; i++) {
                                skuId = skuArray[i][1];
                                link = skuArray[i][0].trim();
                                linkUri = link.replace(prodLinkRegex, "");

                                // Verificando se o SKU esta disponível em estoque
                                if (options.checkIsAvaliable && !SkuDataCache["sku"][skuId].available) {
                                    debug(["O sku “" + skuId + "” foi ignorado pois não possui estoque. Wrapper: ", $this], "info");
                                    continue;
                                }

                                // Verificando se o produto tem o mesmo link que o já existente na vitrine
                                if (options.checkLinkEquals) {
                                    linkEquals = linkUri == ($this.find(".qd_cpProductLink:first").attr("href") || "").trim().replace(prodLinkRegex, "");
                                    if (linkEquals) {
                                        debug("O sku “" + skuId + "” foi ignorado pois tem o mesmo link que o produto existente na vitrine.\n URI: " + linkUri, "info");
                                        continue;
                                    }
                                }

                                // Checando URIs duplicadas
                                if (options.checkDuplicateUri && $this.find(".vtex-cpSkuIds[ref='" + linkUri + "']").length > 0) {
                                    debug("O sku “" + skuId + "” foi ignorado pois já existe uma thumb na vitrine com o mesmo link.\n URI: " + linkUri, "info");
                                    continue;
                                }

                                // Contando os SKUs já passados
                                dtCount = $this.data("qd-cp-sku-count") || 0;
                                $this.data("qd-cp-sku-count", dtCount + 1);

                                // Verifico se a quantidade  de thumbs renderizadas já é o limite configurado para exibição
                                if (dtCount >= (options.thumbsQuantity - 1)) {
                                    $this.find(".qd_cpViewMore").addClass("qd-cp-show-sku-availables");
                                    break;
                                }
                                else if (skuId !== ""){
                                    if(options.addSkuIdInURL){
                                        thumbLink = $('<a href="' + link + '"></a>')[0];
                                        thumbLink.search += (thumbLink.search.length? '&': '') + 'idsku=' + skuId;
                                        thumbLink = thumbLink.href;
                                    }
                                    else
                                        thumbLink = link;

                                    span = $("<span class='vtex-cpSkuIds vtex-cpIndex_" + (dtCount - 1) + " vtex-cpSkuId_" + skuId + " qd_cpHide' " + (primarySku == skuId ? 'data-primary-sku="1"' : "") + "><span class='vtex-cpInner'><a href='" + thumbLink + "' class='qd-cpInnerLink'></a></span><span class='vtex-cpInner2'></span></span>");
                                    span.attr({ "ref": linkUri, "id": skuId });
                                    skuList.append( fn.setThumbs($this, skuId, span, link, objsKey) );
                                    dtCount++;
                                }
                            }
                        }

                        // Adicionando um contador de itens ao wrapper dos thumbs
                        skuList.addClass("qd-cp-thumbs-count-" + skuList.find(".vtex-cpSkuIds").length);

                        // Checando a quantidade de thumbs geradas
                        thumbsWrapper = $this.find(".vtex-cpSkuIds");
                        if (thumbsWrapper.length >= options.minSkuQttShow)
                            thumbsWrapper.removeClass("qd_cpHide");
                        thumbsWrapper.first().addClass("vtex-cpFirst");

                        // Evento de callback após renderizar os wrappers das thumbs
                        $(window).trigger("QuatroDigital.cp_thumbsWrapperAdd", {
                            li: $this,
                            wrapper: skuList,
                            data: SkuDataCache
                        });
                    };

                    // Obtendo os dados de SKU
                    if (options.useProductField) {
                        skuArrayAll = productField.find("li").text().trim().split("|");

                        if (debugOn) {
                            if (productField.find("li").text().trim() === "")
                                debug("O campo produto não esta retornando nenhum valor.\n Produto: " + ($this.find(".qd_cpProductLink[title]:first").attr("title") || "[Título não encontrado]"), "info");
                        }

                        build(skuArrayAll);
                    } else {
                        prodId = $this.find(".qd_cpProdId").val();
                        prodUrl = $this.find(".qd_cpUri").val();

                        if (typeof prodId === "undefined")
                            log(["Não foi possível obter o ID do produto no campo “qd_cpProdId”.", $this]);
                        if (typeof prodUrl === "undefined")
                            log("Não foi possível obter a URL do produto no campo “qd_cpUri”.");

                        fn.getProductInfo(
                            function(skuArrayAll, debugCallType) {
                                build(skuArrayAll, prodId);
                                $(window).trigger("QuatroDigital.cp_liAjaxCallback", {
                                    li: $this,
                                    wrapper: skuList
                                });
                            },
                            prodId,
                            prodUrl,
                            $this
                        );
                    }
                });
            },
            getProductInfo: function(callback, prodId, prodUrl, $li) {
                // Verifica qual chamada deve ser executada conforme a versão do checkout
                if (options.isSmartCheckout)
                    getSkusData.call(this, callback, prodId, prodUrl, $li);
                else {
                    // [DESCONTINUADO] // getSkusDataTraditional.call(this, callback, prodId, prodUrl, stop, skuInfo, $firstData, relatedWrapper);
                }
            },
            getRelatedProductInfo: function(elem) {
                var prodId, prodUrl, out = [elem];

                prodId = elem.find(".qd_cpProdId").val();
                prodUrl = elem.find(".qd_cpUri").val();

                if (typeof prodId !== "undefined" && typeof prodUrl !== "undefined")
                    out = [prodId, prodUrl, elem];

                return out;
            },
            groupSku: function(skuArrayAll, key) {
                var skuObj = {},
                    skuObjOrder = {},
                    out = [],
                    tmp, first, last, lg, tmp2;
                lg = skuArrayAll.length;

                if (lg < 2 && skuArrayAll[0] === "")
                    return out;

                for (var i = 0; i < lg; i++) {
                    tmp = skuArrayAll[i].split(";");
                    first = tmp.pop();
                    last = tmp.shift();

                    if (typeof first != "undefined") {
                        if (typeof skuObj[last] == "undefined")
                            skuObj[last] = [first];
                        else
                            skuObj[last].push(first);
                    }
                }

                for (var ndx in skuObj) {
                    lg = skuObj[ndx].length,
                        tmp2 = [];

                    if (lg > 3) {
                        var part, remainder, j;
                        part = parseInt(lg / 3, 10);
                        remainder = lg % 3;
                        j = part * 2;

                        for (i = 0; i < part; i++) {
                            tmp2.push(skuObj[ndx][i]);
                            tmp2.push(skuObj[ndx][i + part]);
                            tmp2.push(skuObj[ndx][i + j]);
                        }

                        if (remainder == 1)
                            tmp2.push(skuObj[ndx][lg - 1]);
                        else if (remainder == 2) {
                            tmp2.push(skuObj[ndx][lg - 1]);
                            tmp2.push(skuObj[ndx][lg - 2]);
                        }
                    } else
                        tmp2 = skuObj[ndx];

                    out.push([tmp2.shift(), ndx]);
                    skuObjOrder[ndx] = tmp2;
                }

                return out;
            },
            groupSkuByDimension: function(skuArray, prodId) {
                if (!options.isSmartCheckout)
                    return skuArray;
                if (!options.checkDuplicateSKUByDimenion)
                    return skuArray;

                var out, dimension, skuData, sku;

                out = [];
                SkuDataCache["dimension"] = SkuDataCache["dimension"] || {};

                // Verificando se este produto já foi processado em um momento anterior. Caso positivo ele já possui o SKU único por especificação armezado, logo já podemos retornar a função com essa informação
                if (typeof SkuDataCache["dimension"][prodId] !== "undefined" && typeof SkuDataCache["dimension"][prodId]["uniqueSkuByDimension"] === "object" && SkuDataCache["dimension"][prodId]["uniqueSkuByDimension"].length > 0)
                    return out.concat(SkuDataCache["dimension"][prodId]["uniqueSkuByDimension"]);

                // Percorre todos os SKUs de um produto
                for (var i in skuArray) {
                    if (typeof skuArray[i] === "function") continue;

                    sku = skuArray[i][1];
                    skuData = SkuDataCache["sku"][sku];

                    // Checando se a dimensão informada por parametro existe para o SKU corrente
                    dimension = [];
                    for (var l in options.dimensions) {
                        if (typeof options.dimensions[l] === "function") continue;

                        if (typeof skuData.dimensions[options.dimensions[l]] === "string")
                            dimension.push(options.dimensions[l]);
                    }

                    // Iniciando o objeto de dimensão para o produto caso ela ainda naõ exista
                    SkuDataCache["dimension"][skuData.productId] = SkuDataCache["dimension"][skuData.productId] || {};

                    // Percorrendo todas as dimensões passadas por parametro e já validadas como existentes
                    for (var d in dimension) {
                        if (typeof dimension[d] === "function") continue;

                        // Iniciando a informação de dimensão do produto caso não exista
                        SkuDataCache["dimension"][skuData.productId][skuData.dimensions[dimension[d]]] = SkuDataCache["dimension"][skuData.productId][skuData.dimensions[dimension[d]]] || [];
                        SkuDataCache["dimension"][skuData.productId]["uniqueSkuByDimension"] = SkuDataCache["dimension"][skuData.productId]["uniqueSkuByDimension"] || [];
                        // Verifica se a dimensão já possui um SKU armazenado em sua lista e caso possua não adiciona o SKU corrente ao objeto de saída
                        if (!SkuDataCache["dimension"][skuData.productId][skuData.dimensions[dimension[d]]].length) {
                            out.push(skuArray[i]);
                            SkuDataCache["dimension"][skuData.productId]["uniqueSkuByDimension"].push(skuArray[i]);
                        }
                        // Armazenando o SKU corrente na lista de SKU por dimensão e por produto
                        SkuDataCache["dimension"][skuData.productId][skuData.dimensions[dimension[d]]].push(sku);
                    }
                }

                return out;
            },
            setThumbs: function(liElem, skuId, elem, link, objsKey) {
                elem.addClass("vtex-cpLoadingData");
                fn.loadSku(liElem, skuId, liElem.find(".vtex-cpOverlay"), options.action, elem, link, objsKey);

                options.thumbRendered(liElem, elem, fn.productHtml, fn.skuProduct, skuId);

                return elem;
            },
            checkIsAvaliable: function(liElem, skuId, elem, data, link, objsKey) {
                fn.mouseActions2(liElem, skuId, elem, data, link);
            },
            mouseActions2: function(liElem, skuId, elem, data, link) {
                fn.setImgThumb(elem, data);
                fn.setClass(elem, data, skuId);
                elem.bind("mouseenter.qd_cp_mouse", function() {
                        try{
                        liElem.find(".vtex_cpActiveSku").removeClass("vtex_cpActiveSku");
                        elem.addClass("vtex_cpActiveSku");

                        // Armazenando os dados origianis do produto
                        if (options.restoreOriginalDetails) {
                            fn.productOriginalInfo = liElem.find(".qd_cpProductInfoWrap").children().clone();
                            fn.productOriginalLink = liElem.find(".qd_cpProductLink:first").attr("href") || "";
                            var cpSave = liElem.find(".vtex-cpSave");
                            fn.productOriginalSave = [(cpSave.html() || ""), (cpSave.attr("class") || "")];
                        }

                        fn.formatInfo(data, liElem, link);
                        fn.onHover = true;

                        // Callback ao mouse entrar sobre o elemento
                        $(window).trigger("QuatroDigital.cp_thumbMouseenter", {data: data[0], li: liElem, link: link });
                    }
                    catch(e) {log(e.message);}
                });

                if (options.restoreOriginalDetails)
                    elem.bind("mouseleave.qd_cp_mouse", function() {
                        try{
                            liElem.find(".vtex_cpActiveSku").removeClass("vtex_cpActiveSku");
                            fn.setOriginalElements(liElem);
                            fn.onHover = false;

                            // Callback ao mouse sair de sobre o elemento
                            $(window).trigger("QuatroDigital.cp_thumbMouseleave", {data: data[0], li: liElem, link: link });
                        }
                        catch(e) {log(e.message);}
                    });

                return elem;
            },
            formatInfo: function(data, liElem, link) {
                "use strict";
                var obj, pInfo, tmp, imgWrap, imgOverlay, originalImage, _originalImage, originalImage2, imgWidth, imgHeight, images, skuImg, imageExist, img, linkElem, productName, installments, lisPrice, bestPrice, installment, addImage;

                liElem.addClass("vtex-cpInfoFromSKU");
                obj = data[0];

                if ((obj.available || obj.Availability) || options.forceAvailable) {
                    pInfo = liElem.find(".qd_cpProductInfo");
                    installments = (obj.installments || obj.BestInstallmentNumber);
                    lisPrice = options.isSmartCheckout ? obj.listPrice / 100 : obj.ListPrice;
                    bestPrice = options.isSmartCheckout ? obj.bestPrice / 100 : obj.Price;

                    // Disponível / Indisponível
                    pInfo.addClass("qd_cpShow").removeClass("qd_cpHide");
                    liElem.find(".qd_cpProductUnavailable").addClass("qd_cpHide").removeClass("qd_cpShow");

                    // Preço
                    pInfo.find(".qd_cpBestPrice").text(options.currency + fn.numberFormat(options.isSmartCheckout ? obj.bestPrice / 100 : obj.Price));

                    // Economia de
                    liElem.find(".vtex-cpSave").html(options.saveText.replace("#value", fn.numberFormat(lisPrice - bestPrice)));
                    if (bestPrice < lisPrice) {
                        pInfo.find(".qd_cpListPriceWrap").addClass("qd_cpShow").removeClass("qd_cpHide").find(".qd_cpListPrice").text(options.currency + fn.numberFormat(lisPrice));
                        liElem.find(".vtex-cpSave").addClass("qd_cpShow").removeClass("qd_cpHide");
                    } else {
                        pInfo.find(".qd_cpListPriceWrap").addClass("qd_cpHide").removeClass("qd_cpShow");
                        liElem.find(".vtex-cpSave").addClass("qd_cpHide").removeClass("qd_cpShow");
                    }

                    // Parcelamento
                    if (installments > 1) {
                        installment = pInfo.find(".qd_cpInstallment").addClass("qd_cpShow").removeClass("qd_cpHide");
                        installment.find(".qd_cpNumbersOfInstallment").text(installments);
                        installment.find(".qd_cpInstallmentValue").text(options.currency + fn.numberFormat(options.isSmartCheckout ? obj.installmentsValue / 100 : obj.BestInstallmentValue));
                        pInfo.find(".qd_cpFullRegularPrice").addClass("qd_cpHide").removeClass("qd_cpShow");
                    } else {
                        pInfo.find(".qd_cpInstallment").addClass("qd_cpHide").removeClass("qd_cpShow");
                        pInfo.find(".qd_cpFullRegularPrice").addClass("qd_cpShow").removeClass("qd_cpHide");
                    }
                } else {
                    liElem.find(".qd_cpProductInfo").addClass("qd_cpHide").removeClass("qd_cpShow");
                    liElem.find(".qd_cpProductUnavailable").addClass("qd_cpShow").removeClass("qd_cpHide");
                }

                // Nome do produto
                productName = obj.skuname || obj.Name;
                if (options.replaceProductName) {
                    if (isNaN(options.productNameLimiter) || options.productNameLimiter === null)
                        liElem.find(".qd-cpProductName").html(productName);
                    else {
                        if (options.productNameStopInLastWord && (productName || "").length > options.productNameLimiter) {
                            tmp = (productName || "").substring(0, (options.productNameLimiter + 1)).split(" ");
                            tmp.pop();
                            liElem.find(".qd-cpProductName").html(tmp.join(" ") + " ...");
                        } else if ((productName || "").length > options.productNameLimiter)
                            liElem.find(".qd-cpProductName").html((productName || "").substring(0, options.productNameLimiter) + " ...");
                        else
                            liElem.find(".qd-cpProductName").html((productName || ""));
                    }
                }

                linkElem = liElem.find(".qd_cpProductLink");
                // Verificando se foi passado um novo link por parametro
                if (link !== "")
                    linkElem.attr("href", link.replace(prodLinkRegex, ""));
                // Adicionando o id do SKU na URL
                if(options.addSkuIdInURL)
                    linkElem[0].search += (linkElem[0].search.length? '&': '') + 'idsku=' + (obj.sku || obj.Id);

                // Montando a nova imagem
                imgWrap = liElem.find(".vtex-cpProductImage");
                imgOverlay = liElem.find(".vtex-cpImgOverlay");
                // Obtendo imagem original
                originalImage = imgWrap.find(".vtex-cpOriginalImage");
                _originalImage = originalImage[0];
                imgWidth = (originalImage.attr("width") || _originalImage.naturalWidth);
                imgHeight = (originalImage.attr("height") || _originalImage.naturalHeight);
                // Obtendo a dimensão da imagem caso seja definido como auto
                if (options.isSmartCheckout && options.imageSize == "auto")
                    options.imageSize = { width: imgWidth, height: imgHeight };
                // Função que adiciona a imagem nova do SKU
                addImage = function(dataObj, label) {
                    var skuId = dataObj.sku || dataObj.Id;
                    // Obtendo a nova imagem
                    images = fn.getImageUrl(dataObj, options.productImgId, options.isSmartCheckout, label);
                    // Para os casos de haver label, verifica-se se alguma url foi retornada e caso não exista a função para por aqui
                    if (typeof label === "string" && images[0] === "") return;

                    skuImg = liElem.find("img[src*='" + (images[0].split("?").shift() || originalImage.attr("src")) + "']:not('.vtex-cpImgsThumb')");
                    imageExist = (skuImg.length > 0) ? true : false;
                    imgOverlay.show();
                    if (imageExist) {
                        originalImage.stop(true).removeClass("qd-visible").fadeOut(options.speedFade);
                        imgOverlay.hide();
                        liElem.find(".vtex-cpSkuImage").stop(true).removeClass("qd-visible").fadeOut(options.speedFade);
                        skuImg.stop(true).addClass("qd-visible").fadeTo(options.speedFade, 1.0);
                        // Adicionando as informações de SKU
                        skuImg.attr("data-sku", skuId);
                        if(typeof label === "string" & label !== "")
                            skuImg.attr("data-sku-label", label);
                        // Procurando uma imagem irmã q seja para o mesmo SKU
                        skuImg.siblings("[data-sku='" + skuId + "']").stop(true).addClass("qd-visible").fadeTo(options.speedFade, 1.0);
                    } else {
                        img = $('<img src="' + (images[0] || originalImage.attr("src")) + '" alt="" class="vtex-cpSkuImage" style="display:none;" data-sku="' + skuId + '" />');
                        if(typeof label === "string" & label !== "")
                            img.attr("data-sku-label", label);
                        img.load(function() {
                            if (fn.onHover) {
                                originalImage.stop(true).removeClass("qd-visible").fadeOut(options.speedFade);
                                imgOverlay.hide();
                                liElem.find(".vtex-cpSkuImage").stop(true).removeClass("qd-visible").fadeOut(options.speedFade);
                                img.stop(true).addClass("qd-visible").fadeTo(options.speedFade, 1.0);
                                // Procurando uma imagem irmã q seja para o mesmo SKU
                                liElem.find(".vtex-cpSkuImage[data-sku='" + skuId + "']").stop(true).addClass("qd-visible").fadeTo(options.speedFade, 1.0);
                            } else {
                                imgOverlay.hide();
                                fn.setOriginalImg(liElem);
                            }
                        });
                        imgWrap.append(img);
                    }
                };
                // Percorrendo os labels informados
                for (var i in options.imageLabel) {
                    if (typeof options.imageLabel[i] === "function")
                        continue;

                    getFullSkuData(obj.sku, function(data) {
                        addImage(data[0], options.imageLabel[i]);
                    }, true);
                }
            },
            setOriginalElements: function(liElem) {
                if (fn.productOriginalInfo !== null && liElem.hasClass("vtex-cpInfoFromSKU")) {
                    liElem.removeClass("vtex-cpInfoFromSKU").find(".qd_cpProductInfoWrap").html(fn.productOriginalInfo);
                    fn.setOriginalImg(liElem);
                    fn.setOriginalLink(liElem);
                    fn.setOriginalSaveText(liElem);
                }
            },
            setOriginalImg: function(liElem) {
                var imageLink = liElem.find(".vtex-cpProductImage");
                imageLink.find(":not(.vtex-cpOriginalImage)").stop(true).fadeOut(options.speedFade);
                imageLink.find(".vtex-cpOriginalImage").stop(true).fadeTo(options.speedFade, 1.0);
            },
            setOriginalLink: function(liElem) {
                liElem.find(".qd_cpProductLink").attr("href", fn.productOriginalLink);
            },
            setOriginalSaveText: function(liElem) {
                liElem.find(".vtex-cpSave").html(fn.productOriginalSave[0]).attr("class", fn.productOriginalSave[1]);
            },
            setImgThumb: function(elem, data) {
                var exec = function(data, label, dataSmartCheckout) {
                    var img = fn.getImageUrl(data[0], options.thumbImgId, false, label, dataSmartCheckout);
                    elem.removeClass("vtex-cpLoadingData");

                    if (img.length > 0) {
                        elem.css("background-image", "url('" + img[0] + "')");
                        elem.find(".qd-cpInnerLink").append('<img src="' + img[0] + '" alt="" class="vtex-cpImgsThumb vtex-cpThumb_' + (data[0].sku || data[0].Id) + '" alt=""/>');
                    }
                };

                if (options.isSmartCheckout && options.thumbByLabel !== null)
                    // obtendo os dados de produto/sku
                    getFullSkuData(data[0].sku || data[0].Id, function(dataFull) {
                        exec(dataFull, options.thumbByLabel, data[0]);
                    }, true);
                else
                    exec(data);
            },
            loadSku: function(liElem, skuId, overlay, action, span, link, objsKey) {
                if (options.isSmartCheckout)
                    adjustSkuData.call(this, liElem, skuId, overlay, action, span, link, objsKey);
                else
                // DESCONTINUADO // loadSkuLegacy.call(this, liElem, skuId, overlay, action, span, link, objsKey);
                    log("Esse método foi descontinuado =/");
            },
            numberFormat: function(val) {
                var out = "",
                    _char = "",
                    thousandsFormatted = "";
                var values = val.toFixed(2).split(".");
                var numbers = values[0].split("");
                var i = 0;
                var numLength = numbers.length;
                var thousandsSeparator = ".";
                for (var j = values[0].length; j > 0; j--) {
                    _char = values[0].substr(j - 1, 1);
                    i++;
                    if (i % 3 === 0 && numLength > i)
                        _char = thousandsSeparator + _char;
                    thousandsFormatted = _char + thousandsFormatted;
                }
                out = thousandsFormatted + "," + values[1];
                return out;
            },
            getImageUrl: function(obj, typeId, noThumb, label, objSmartCheckout) {
                var out = [],
                    image, getImage, dataSku;

                image = obj.image || obj.Images;

                // função que busca a imagem no json de produto/sku
                getImage = function(image, obj) {
                    var getImageOut = [];

                    if (image.length < 1) {
                        log("Não foram encontradas imagens para o SKU: " + obj.Id);
                        return getImageOut;
                    }

                    for (var array in image)
                        for (var img in image[array])
                            if (label !== null && typeof label === "string" ? (image[array][img].Name ? label.toLowerCase() == image[array][img].Name.toLowerCase() : false) : image[array][img].IsMain) {
                                getImageOut.push(image[array][img].Path);
                                break;
                                break;
                            }

                    return getImageOut;
                };

                // Verificando se é para buscar a imagem do thumb pelo label (SmartChekout)
                if (typeof label === "string") {
                    image = getImage(image, obj);

                    if (image.length)
                        image = image[0];
                    else {
                        if (typeof objSmartCheckout !== "undefined" && typeof objSmartCheckout.image !== "undefined")
                            image = objSmartCheckout.image;
                        else {
                            image = "";
                            debug("Não foi possível obter a imagem padrão do SKU pois o objeto fornecido no ambiente SmartCheckout é inexistente ou esta em um formato não esperado. SKU:" + obj.Id, "alerta");
                        }
                        debug("Não foi possível obter a imagem da thumb por label. SKU:" + obj.Id, "alerta");
                    }
                }

                // Verificando se é uma thumb ou imagem normal
                if (noThumb)
                    out.push(options.imageUrl(typeof image === "string" ? image : (getImage(image, obj))[0], options.imageSize.width, options.imageSize.height), image);
                else
                    out.push(options.imageUrl(image, options.thumbSize.width, options.thumbSize.height), image);

                return out;
            },
            setClass: function(elem, data, skuId) {
                if (options.isSmartCheckout)
                    elem.addClass("vtex-cp_" + data[0].skuname.replace(/[^a-zA-Z0-9\-\_]/g, ""));
                else
                    elem.addClass("vtex-cp_" + data[0].Name.replace(/[^a-zA-Z0-9\-\_]/g, ""));
            },
            shelfSetup: function(li) {
                try {
                    // Classe nos links
                    li.find("a[href='" + li.find(".qd_cpUri").val() + "']").addClass("qd_cpProductLink");
                    // Imagem do produto
                    var largeImg = null;
                    li.find("img").each(function() {
                        var $t = $(this);
                        largeImg = null === largeImg ? $t : largeImg;
                        if (parseInt((largeImg.attr("width") || 0), 10) < parseInt(($t.attr("width") || 0), 10))
                            largeImg = $t;
                    });
                    largeImg.before('<div class="vtex-cpImgOverlay"></div>');
                    largeImg.parent().addClass("vtex-cpProductImage");
                    // Informações do produto
                    var txtWrap = jQuery('<span class="vtex-cpProductTextWrap"><div class="vtex-cpOverlay"></div></span>'),
                        infoWrap = jQuery('<span class="qd_cpProductInfoWrap"></span>'),
                        pInfo = li.find(".qd_cpProductInfo");
                    pInfo.before(txtWrap);
                    pInfo.appendTo(infoWrap);
                    li.find(".qd_cpProductUnavailable").appendTo(infoWrap);
                    infoWrap.appendTo(txtWrap);
                    // Economia
                    if (fn.saveCount < 1) {
                        var re = /\sR\$\s[0-9]+,[0-9]{1,2}/i,
                            saveTxt = li.find(".vtex-cpSave").text();
                        if (saveTxt.search(re) > -1)
                            options.saveText = saveTxt.replace(re, " R$ #value");
                        fn.saveCount++;
                    }
                } catch (e) {
                    log(["Problemas ao executar o auto setup. Detalhes: ", e.message], "alerta");
                };
            }
        };

        // Função para definir o tamanho da imagem através da URL
        imageSizeURL = function(url) {

        };

        // Método para buscar os dados do produto na nova URL do Checkout
        getSkusData = function(callback, prodId, prodUrl, $li) {
            var skus = [];

            // Vejo se foi devolvido o JSON da busca da VTEX e então eu busco produtos similares a este antes de entregar os SKUs
            options.similarProducts($li, prodId, prodUrl, function(searchJson) {
                // Ação quando recebo o JSON da VTEX
                if(searchJson){
                    try{
                        var requestsCount = 1;
                        var completeCount = 0;
                        var callbackRequest = function(skus) {
                            completeCount = completeCount + 1;

                            if(requestsCount === completeCount)
                                callback(skus);
                        };

                        // Produto padrão da vitrine
                        requestData(function(skus) {
                            callbackRequest(skus);
                        }, prodId, prodUrl);
                        
                        // Produtos do JSON
                        for(var i = 0; i < searchJson.length; i++){
                            // Verifico se já fiz requests suficientes para exibir a quantidade de thumbs exigidas
                            if(options.limitRequestSimilarProducts && i === options.thumbsQuantity)
                                break;

                            requestsCount = requestsCount + 1;
                            requestData(function(skus) {
                                callbackRequest(skus);
                            }, searchJson[i].id, searchJson[i].url);
                        }
                    }
                    catch(e) {
                        log(e.message);
                    }
                }
                // Ação padrão quando não recebo dados da função
                else
                    requestData(function(skus) {
                        callback(skus);
                    }, prodId, prodUrl);
            });

            // 
            function requestSuccess(data, callback2, prodId, prodUrl) {
                try {
                    // Armazenando os dados do SKU
                    SkuDataCache = SkuDataCache || {
                        prod: {},
                        sku: {}
                    };
                    SkuDataCache["prod"][prodId] = data;

                    // Agrupando os SKUs da maneira antiga para manter a compatibilidade com as funções legadas
                    for (var k in data.skus) {
                        if (typeof data.skus[k] === "function") continue;

                        skus.push(data.skus[k].sku + ";" + prodUrl);
                        fn.skuProduct[data.skus[k].sku] = prodId;

                        // Armazenando os dados por SKU
                        SkuDataCache["sku"][data.skus[k].sku] = data.skus[k];
                        SkuDataCache["sku"][data.skus[k].sku].productId = prodId;
                    }

                    // Acionando callback que continua a execução
                    callback2(skus);

                    options.ajaxCallback();
                    $(window).trigger("QuatroDigital.cp_ajaxCallback", this);
                } catch (e) {
                    log(["Ocorreu um problema após o retorno da requisição a api de produto da VTEX. Detalhes: ", e.message], "alerta");
                }
            };

            // Função que busca os dados do SKU através da API de produto
            function requestData(callback2, prodId, prodUrl) {
                var prodData = false;
                if(supportJSON){
                    try{
                        prodData = JSON.parse(window.qdSessionStorage.getItem("QD_cp_prod_info_" + prodId));
                        if(prodData)
                            requestSuccess(prodData, callback2, prodId, prodUrl);
                    }
                    catch(e){
                        log("Problemas ao usar o cache. " + e.message, "alerta");
                    }
                }

                if(!prodData){
                    $.qdAjax({
                        "url": "/api/catalog_system/pub/products/variations/" + prodId,
                        "dataType": "json",
                        "success": function(data) {
                            requestSuccess(data, callback2, prodId, prodUrl);
                            if(supportJSON)
                                window.qdSessionStorage.setItem("QD_cp_prod_info_" + prodId, JSON.stringify(data), 120);
                        },
                        "error": function() {
                            log("Erro ao tentar obter os dados de SKU do produto");
                        },
                        clearQueueDelay: null
                    });
                }
            };
        };

        // Função que ajusta os dados do SKU para funcionarem com as funções legadas do plugin
        adjustSkuData = function(liElem, skuId, overlay, action, span, link, objsKey) {
            fn.checkIsAvaliable(liElem, skuId, span, [SkuDataCache["sku"][skuId]], link, objsKey);
        }

        // Obtém os dados completos do SKU
        getFullSkuData = function(skuId, callback, async) {
            // verificando se já existe os dados para esse SKU
            if (typeof SkuDataCache["sku"][skuId] !== "undefined" && typeof SkuDataCache["sku"][skuId].fullData !== "undefined") {
                if (typeof callback === "function")
                    callback(SkuDataCache["sku"][skuId].fullData);

                return SkuDataCache["sku"][skuId].fullData;
            }

            // Caso ainda não exista cache, os dados são requisitados
            $.qdAjax({
                "url": "/produto/sku/" + skuId,
                "data": "json",
                success: function(data) {
                    // Fazendo cache dos dados obtidos
                    SkuDataCache["sku"][skuId].fullData = data;

                    if (typeof callback === "function")
                        callback(SkuDataCache["sku"][skuId].fullData);
                },
                error: function() {
                    log("Erro ao tentar obter todos os dados do SKU.")
                },
                async: (typeof async !== "undefined") ? async : false,
                clearQueueDelay: null
            });

            return SkuDataCache["sku"][skuId].fullData;
        };

        fn.productShelf = jQuery(this);
        fn.init();

        options.callback();
        $(window).trigger("QuatroDigital.cp_callback", this);

        return fn.productShelf;
    } catch (e) {
        log(["Problemas ao executar o QD Cores Prateleira, detalhes: ", e.message], "alerta");
    };
};
})(this, jQuery);